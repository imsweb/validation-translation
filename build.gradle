import java.time.Duration

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.2.1'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0' // publish to Maven Central
    id 'com.github.ben-manes.versions' version '0.49.0' // check for out-of-date dependencies (run 'dependencyUpdates' manually)
    id 'org.sonatype.gradle.plugins.scan' version '2.6.1' // scan for vulnerabilities
}

group = 'com.imsweb'
version = file('VERSION').text.trim()
description = 'This library allows a Genedits Metafile to be translated into Groovy edits that can be executed in the SEER Validation framework.'

println "Starting build using JDK ${Runtime.version().feature()}"

repositories {
    mavenCentral()
}

dependencies {
    api 'com.imsweb:validation:3.2'
    api 'com.imsweb:naaccr-xml:10.1'
    api 'com.imsweb:seerutils:5.6'
    api 'com.imsweb:staging-algorithm-cs:02.05.50.10'

    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'net.sf.squirrel-sql.thirdparty-non-maven:java-cup:0.11a'
    implementation 'org.xerial:sqlite-jdbc:3.43.2.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.21.1'
    implementation 'commons-cli:commons-cli:1.6.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.21.1'
    implementation 'org.slf4j:slf4j-nop:2.0.12'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.imsweb:data-generator:1.31'
}

// enforce UTF-8, display the compilation warnings
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

// the Javadoc was made way too strict in Java 8 and it's not worth the time fixing everything!
tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// generate javadoc and sources (required by Nexus)
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withJavadocJar()
    withSourcesJar()
}

// customize the manifest
jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Information Management Services Inc.',
                'Created-By': System.properties.getProperty('java.vm.version') + ' (' + System.properties.getProperty('java.vm.vendor') + ')',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Automatic-Module-Name': 'com.imsweb.validation-translation',
        )
    }
}

// checkstyle plugin settings
checkstyle {
    ignoreFailures = false
    configFile = file('config/checkstyle/checkstyle.xml')
    configProperties = ['suppressionFile' : file('config/checkstyle/checkstyle-exclude.xml')]
}

// spotbugs plugin settings
spotbugs {
    excludeFilter.set(file('config/spotbugs/spotbugs-exclude.xml'))
}

// use this task to generate the edits parser for Genedits syntax
tasks.register('generateEditsParser') {
    doLast {
        // create lexer
        javaexec {
            main = '-jar'
            args = ['config/jflex-1.4.2/lib/JFlex.jar',
                    '--nobak',
                    '-d',
                    'src/test/java/com/imsweb/seeredits/genedits/language',
                    'src/test/resources/syntax/genedits.flex']
        }

        // create parser
        javaexec {
            main = '-jar'
            args = ['config/jflex-1.4.2/lib/java-cup-11a.jar',
                    '-symbols',
                    'GeneditsTokenType',
                    '-parser',
                    'GeneditsParser',
                    '-destdir',
                    'src/test/java/com/imsweb/seeredits/genedits/language',
                    'src/test/resources/syntax/genedits.cup']
        }
    }
}

// use this task to generate the regex parser
tasks.register('generateRegexParser') {
    doLast {
        // create lexer
        javaexec {
            main = '-jar'
            args = ['config/jflex-1.4.2/lib/JFlex.jar',
                    '--nobak',
                    '-d',
                    'src/test/java/com/imsweb/seeredits/genedits/language/regex',
                    'src/test/resources/syntax/regex.flex']
        }

        // create parser
        javaexec {
            main = '-jar'
            args = ['config/jflex-1.4.2/lib/java-cup-11a.jar',
                    '-symbols',
                    'GeneditsRegexToken',
                    '-parser',
                    'GeneditsRegexParser',
                    '-destdir',
                    'src/test/java/com/imsweb/seeredits/genedits/language/regex',
                    'src/test/resources/syntax/regex.cup']
        }
    }
}

// use this task to generate a fat JAR to easily run a CLI
tasks.register('buildFatJar',Jar) {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Information Management Services Inc.',
                'Created-By': System.properties.getProperty('java.vm.version') + ' (' + System.properties.getProperty('java.vm.vendor') + ')',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Automatic-Module-Name': 'com.imsweb.validation-translation',
                'Main-Class': 'com.imsweb.validation.translation.MetafileTranslatorCli'
        )
    }
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy=DuplicatesStrategy.EXCLUDE
    with jar
}

// Nexus vulnerability scan (https://github.com/sonatype-nexus-community/scan-gradle-plugin)
ossIndexAudit {
    outputFormat = 'DEPENDENCY_GRAPH'
    printBanner = false


    excludeVulnerabilityIds = [
            'CVE-2022-42003',
            'CVE-2022-42004',
            'sonatype-2022-6438'
    ]
}
check.dependsOn 'ossIndexAudit'

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return (!stableKeyword && !(version ==~ regex)) || version == '021-11'
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

// needed to deploy to Maven Central
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'validation-translation'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Validation Translation'
                description = 'This project allows a Genedits Metafile to be translated into Groovy edits that can be executed in the SEER Validation framework.'
                url = 'https://github.com/imsweb/validation-translation'
                inceptionYear = '2021'

                licenses {
                    license {
                        name = 'A modified BSD License (BSD)'
                        url = 'https://github.com/imsweb/validation/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'depryf'
                        name = 'Fabian Depry'
                        email = 'depryf@imsweb.com'
                    }
                }

                scm {
                    url = 'https://github.com/imsweb/validation-translation'
                    connection = 'scm:https://github.com/imsweb/validation-translation.git'
                    developerConnection = 'scm:git@github.com:imsweb/validation-translation.git'
                }
            }
        }
    }
}

// setup JAR signing
signing {
    required { !project.version.endsWith('-SNAPSHOT') }
    
    String signingKey = project.findProperty('signingKey') ?: ''
    String signingPassword = project.findProperty('signingPassword') ?: ''

    useInMemoryPgpKeys(signingKey, signingPassword)

    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '63e5ddd3ab0d16'

            username = project.findProperty("nexusUsername")
            password = project.findProperty("nexusPassword")
        }
    }

    clientTimeout = Duration.ofSeconds(300)
    connectTimeout = Duration.ofSeconds(60)

    transitionCheckOptions {
        maxRetries.set(50)
        delayBetween.set(Duration.ofMillis(5000))
    }
}

// Gradle wrapper, this allows to build the project without having to install Gradle!
wrapper {
    gradleVersion = '8.4'
    distributionType = Wrapper.DistributionType.ALL
}


